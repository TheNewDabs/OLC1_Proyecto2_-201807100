/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[1,3],$V2=[1,4],$V3=[2,5,7],$V4=[1,22],$V5=[1,19],$V6=[1,21],$V7=[1,26],$V8=[1,23],$V9=[1,24],$Va=[1,25],$Vb=[1,27],$Vc=[2,10],$Vd=[2,47],$Ve=[1,47],$Vf=[1,48],$Vg=[2,5,8,24,35,36,37,38],$Vh=[1,69],$Vi=[1,66],$Vj=[1,67],$Vk=[1,57],$Vl=[1,58],$Vm=[1,60],$Vn=[1,61],$Vo=[1,62],$Vp=[1,63],$Vq=[1,64],$Vr=[1,65],$Vs=[1,68],$Vt=[2,19],$Vu=[1,72],$Vv=[28,34,55],$Vw=[2,80],$Vx=[1,79],$Vy=[1,80],$Vz=[1,81],$VA=[1,82],$VB=[1,83],$VC=[1,84],$VD=[1,85],$VE=[1,86],$VF=[1,87],$VG=[1,88],$VH=[1,89],$VI=[1,90],$VJ=[1,91],$VK=[1,92],$VL=[1,93],$VM=[28,34,55,57,59,71,72,73,74,75,76,77,78,79,80,81,82,83],$VN=[2,21],$VO=[1,133],$VP=[2,86],$VQ=[1,137];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"Inicio":3,"Lista":4,"Reservada_public":5,"Selector":6,"EOF":7,"Simbolo_Cerrar_LLaves":8,"Reservada_class":9,"ID":10,"Simbolo_Abrir_LLaves":11,"ListaMetodos":12,"Reservada_interface":13,"ListaDefiniciones":14,"SelectorMetodo":15,"TiposVariables":16,"Declaracion":17,"RecuperacionM":18,"Simbolo_Punto_Y_Coma":19,"Reservada_static":20,"Reservada_void":21,"Reservada_main":22,"Simbolo_Abrir_Parentesis":23,"Reservada_String":24,"Simbolo_Abrir_Corchete":25,"Simbolo_Cerrar_Corchete":26,"Reservada_args":27,"Simbolo_Cerrar_Parentesis":28,"ListaInstrucciones":29,"ListaParametros":30,"TipoVariables":31,"TipoVariable":32,"ListaParametrosP":33,"Simbolo_Coma":34,"Reservada_int":35,"Reservada_double":36,"Reservada_char":37,"Reservada_boolean":38,"ListaIntrucciones":39,"SelectorID":40,"Reservada_return":41,"ValoresReturn":42,"Reservada_continue":43,"Reservada_break":44,"Reservada_print":45,"Expresion":46,"Reservada_println":47,"SentenciaIf":48,"SentenciaFor":49,"SentenciaWhile":50,"SentenciaDo":51,"RecuperacionI":52,"DeclaracionP":53,"Simbolo_Igual":54,"DeclarcionBP":55,"DeclaracionBP":56,"Simbolo_Mas":57,"Exp":58,"Simbolo_Menos":59,"Entero":60,"Operador":61,"Decimal":62,"Cadena":63,"Caracter":64,"Reservada_true":65,"Reservada_false":66,"PosibilidadMetodo":67,"Simbolo_Negaci":68,"n":69,"RecuperacionE":70,"Simbolo_Asterisco":71,"Simbolo_Diagonal":72,"Simbolo_Adicion":73,"Simbolo_Sustraccion":74,"Simbolo_Comparacion":75,"Simbolo_Mayor":76,"Simbolo_Mayor_Igual":77,"Simbolo_Menor":78,"Simbolo_Menor_Igual":79,"Simbolo_Distinto":80,"Simbolo_AND":81,"Simbolo_OR":82,"Simbolo_Xor":83,"ListaValores":84,"ListaValoresP":85,"SentenciaIF":86,"Reservada_if":87,"CaminosIF":88,"Reservada_else":89,"OpcionElse":90,"Reservada_for":91,"Reservada_while":92,"Reservada_do":93,"ListaDefiniones":94,"SelectorDefincion":95,"$accept":0,"$end":1},
terminals_: {2:"error",5:"Reservada_public",7:"EOF",8:"Simbolo_Cerrar_LLaves",9:"Reservada_class",10:"ID",11:"Simbolo_Abrir_LLaves",13:"Reservada_interface",14:"ListaDefiniciones",19:"Simbolo_Punto_Y_Coma",20:"Reservada_static",21:"Reservada_void",22:"Reservada_main",23:"Simbolo_Abrir_Parentesis",24:"Reservada_String",25:"Simbolo_Abrir_Corchete",26:"Simbolo_Cerrar_Corchete",27:"Reservada_args",28:"Simbolo_Cerrar_Parentesis",29:"ListaInstrucciones",31:"TipoVariables",32:"TipoVariable",34:"Simbolo_Coma",35:"Reservada_int",36:"Reservada_double",37:"Reservada_char",38:"Reservada_boolean",41:"Reservada_return",43:"Reservada_continue",44:"Reservada_break",45:"Reservada_print",47:"Reservada_println",48:"SentenciaIf",54:"Simbolo_Igual",55:"DeclarcionBP",57:"Simbolo_Mas",59:"Simbolo_Menos",60:"Entero",62:"Decimal",63:"Cadena",64:"Caracter",65:"Reservada_true",66:"Reservada_false",68:"Simbolo_Negaci",69:"n",71:"Simbolo_Asterisco",72:"Simbolo_Diagonal",73:"Simbolo_Adicion",74:"Simbolo_Sustraccion",75:"Simbolo_Comparacion",76:"Simbolo_Mayor",77:"Simbolo_Mayor_Igual",78:"Simbolo_Menor",79:"Simbolo_Menor_Igual",80:"Simbolo_Distinto",81:"Simbolo_AND",82:"Simbolo_OR",83:"Simbolo_Xor",87:"Reservada_if",89:"Reservada_else",91:"Reservada_for",92:"Reservada_while",93:"Reservada_do"},
productions_: [0,[3,1],[4,3],[4,1],[4,3],[6,4],[6,4],[6,2],[12,3],[12,3],[12,1],[12,3],[18,1],[18,1],[15,11],[15,7],[15,6],[15,2],[30,4],[30,0],[33,4],[33,0],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[39,3],[39,3],[39,3],[39,3],[39,3],[39,6],[39,6],[39,2],[39,2],[39,2],[39,2],[39,1],[39,2],[52,1],[52,2],[17,3],[17,2],[53,3],[53,3],[53,0],[56,3],[56,0],[46,2],[46,2],[46,1],[58,2],[58,2],[58,2],[58,2],[58,2],[58,2],[58,3],[58,4],[58,3],[58,2],[70,1],[70,1],[61,2],[61,2],[61,2],[61,2],[61,2],[61,2],[61,2],[61,2],[61,2],[61,2],[61,2],[61,2],[61,2],[61,2],[61,2],[61,0],[67,3],[67,0],[84,2],[84,0],[85,3],[85,0],[40,4],[40,3],[40,2],[40,2],[40,2],[42,2],[42,1],[42,2],[86,8],[86,2],[88,2],[88,0],[90,1],[90,3],[90,2],[49,11],[49,2],[50,7],[50,2],[51,9],[51,2],[94,2],[94,3],[94,1],[94,3],[95,5],[95,5],[95,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

		this.$=new Nodo("Inicio","");
        this.$.agregarHijo($$[$0]);
        Raiz=this.$;
        var retorno={
			raiz:Raiz,
			Errores: ListaErrores,
			Tokens: ListaTokens
        };
        ListaErrores = new Array();
        ListaTokens = new Array();
        return retorno;
	
break;
case 2:
this.$=new Nodo("Lista", "");
										this.$.Hijos.push(new Nodo("Reservada_public", ""));
										this.$.Hijos.push($$[$0-1]);
										this.$.Hijos.push($$[$0]);
break;
case 3:
 this.$=new Nodo("Lista", "");
break;
case 4:
 this.$ = new Nodo("Lista",""); 
    	this.$.Hijos.push(new Nodo("Error", ""));  
		this.$.Hijos.push($$[$0]);
        ListaErrores.push("Sintactico", $$[$0-2], "Token inesperado", this._$.first_line, this._$.first_column);
break;
case 5:
this.$=new Nodo("Selector", ""); 
															this.$.Hijos.push(new Nodo("Reservada_class", "class ")); 
															this.$.Hijos.push(new Nodo("ID", $$[$0-2]));
															this.$.Hijos.push(new Nodo("Simbolo_Abrir_LLaves", "{\n"));
															this.$.Hijos.push($$[$0]);
break;
case 6:
this.$=new Nodo("Selector", ""); 
																	this.$.Hijos.push(new Nodo("Reservada_interface", "")); 
																	this.$.Hijos.push(new Nodo("ID", ""));
																	this.$.Hijos.push(new Nodo("Simbolo_Abrir_LLaves", ""));
																	this.$.Hijos.push($$[$0]);
																	;
break;
case 7:
 this.$ = new Nodo("Selector",""); 
    	this.$.Hijos.push(new Nodo("Error", ""));  
        ListaErrores.push("Sintactico", $$[$0-1], "Token inesperado", this._$.first_line, this._$.first_column);
break;
case 8:
this.$=new Nodo("ListaMetodos", "");
													this.$.Hijos.push(new Nodo"Reservada_public", ""));
													this.$.Hijos.push($$[$0-1]);
													this.$.Hijos.push($$[$0]);
break;
case 9:
this.$=new Nodo("ListaMetodos", "");
								this.$.Hijos.push($$[$0-2]);
								this.$.Hijos.push($$[$0-1]);
								this.$.Hijos.push($$[$0]);
break;
case 10:
this.$=new Nodo("ListaMetodos", ""); this.$.Hijos.push(new Nodo("Simbolo_Cerrar_LLaves", "}\n\n"));
break;
case 11:
 this.$ = new Nodo("ListaMetodos",""); 
    	this.$.Hijos.push(new Nodo("Error", ""));  
		this.$.Hijos.push($$[$0]);
        ListaErrores.push("Sintactico", $$[$0-2], "Token inesperado", this._$.first_line, this._$.first_column);
break;
case 12: case 13:
this.$=new Nodo("RecuperacionM", "");
break;
case 14:
this.$=new Nodo("SelectorMetodo", "");
	this.$.Hijos.push(new Nodo("Reservada_static", "function "));;
    this.$.Hijos.push(new Nodo("Reservada_void", ""));
	this.$.Hijos.push(new Nodo("Reservada_main", "main"));
	this.$.Hijos.push(new Nodo("Simbolo_Abrir_Parentesis", "("));
	this.$.Hijos.push(new Nodo("Reservada_String", ""));
	this.$.Hijos.push(new Nodo("Simbolo_Abrir_Corchete", ""));
	this.$.Hijos.push(new Nodo("Simbolo_Cerrar_Corchete", ""));
	this.$.Hijos.push(new Nodo("Reservada_args", ""));
	this.$.Hijos.push(new Nodo("Simbolo_Cerrar_Parentesis", ")"));
	this.$.Hijos.push(new Nodo("Simbolo_Abrir_LLaves", "{\n"));
	this.$.Hijos.push($$[$0]);
break;
case 15:
this.$=new Nodo("SelectorMetodo", "");
	this.$.Hijos.push(new Nodo("Reservada_void", "function "));
	this.$.Hijos.push(new Nodo("ID", $$[$0-5]));
	this.$.Hijos.push(new Nodo("Simbolo_Abrir_Parentesis", "("));
	this.$.Hijos.push($$[$0-3]);
	this.$.Hijos.push(new Nodo("Simbolo_Cerrar_Parentesis", "("));
	this.$.Hijos.push(new Nodo("Simbolo_Abrir_LLaves", "{\n"))6
	this.$.Hijos.push($$[$0]);
break;
case 16:
this.$=new Nodo("SelectorMetodo", "");
	this.$.Hijos.push($$[$0-5]);
	this.$.Hijos[0].Hijos[0].Traduccion = "function ";
	this.$.Hijos.push(new Nodo("ID", $$[$0-4]));
	this.$.Hijos.push(new Nodo("Simbolo_Abrir_Parentesis", "("));
	this.$.Hijos.push($$[$0-2]);
	this.$.Hijos.push(new Nodo("Simbolo_Abrir_LLaves", "{\n"));
	this.$.Hijos.push(new Nodo("Simbolo_Cerrar_Parentesis", "("));
	this.$.Hijos.push($$[$01]);
break;
case 17:
 this.$ = new Nodo("SelectorMetodo",""); 
    	this.$.Hijos.push(new Nodo("Error", ""));  
        ListaErrores.push("Sintactico", $$[$0-1], "Token inesperado", this._$.first_line, this._$.first_column);
break;
case 18:
this.$=new Nodo("ListaParametros", "");
	this.$.Hijos.push($$[$0-3]);
	this.$.Hijos[0].Hijos[0].Traduccion = "";
	this.$.Hijos.push(new Nodo("ID", $$[$0-2]));
	this.$.Hijos.push($$[$0-1]);
	this.$.Hijos.push(new Nodo("Simbolo_Cerrar_Parentesis", ")"));
break;
case 20:
this.$=new Nodo("ListaParametrosP", "");
	this.$.Hijos.push(new Nodo("Simbolo_Coma", ", "));
	this.$.Hijos.push($$[$0-2]);
	this.$.Hijos[1].Hijos[0].Traduccion = "";
	this.$.Hijos.push(new Nodo("ID", $$[$0-1]));
	this.$.Hijos.push($$[$0]);
break;
case 22:
this.$=new Nodo("ListaParametrosP", ""); this.$.Hijos.push(new Nodo("Reservada_int", "var "));
break;
case 23:
this.$=new Nodo("ListaParametrosP", ""); this.$.Hijos.push(new Nodo("Reservada_double", "var "));
break;
case 24:
this.$=new Nodo("ListaParametrosP", ""); this.$.Hijos.push(new Nodo("Reservada_char", "var "));
break;
case 25:
this.$=new Nodo("ListaParametrosP", ""); this.$.Hijos.push(new Nodo("Reservada_String", "var "));
break;
case 26:
this.$=new Nodo("ListaParametrosP", ""); this.$.Hijos.push(new Nodo("Reservada_boolean", "var "));
break;
case 27:
 this.$ = new Nodo("TiposVariables",""); 
    	this.$.Hijos.push(new Nodo("Error", ""));  
    	ListaErrores.push("Sintactico", $$[$0], "Token inesperado", this._$.first_line, this._$.first_column);
break;
case 28:
this.$=new Nodo("ListaInstrucciones", ""); this.$.Hijos.push($$[$0-2]); this.$.Hijos.push($$[$0-1]); this.$.Hijos.push($$[$0]);
break;
case 29:
this.$=new Nodo("ListaInstrucciones", ""); this.$.Hijos.push(new Nodo("ID", $$[$0-2])); this.$.Hijos.push($$[$0-1]); this.$.Hijos.push($$[$0]);
break;
case 30:
this.$=new Nodo("ListaInstrucciones", ""); 
	this.$.Hijos.push(new Nodo("Reservada_return", "return")); 
	this.$.Hijos.push($$[$0-1]); this.$.Hijos.push($$[$0]);
break;
case 31:
this.$=new Nodo("ListaInstrucciones", ""); 
	this.$.Hijos.push(new Nodo("Reservada_continue", "continue")); 
	this.$.Hijos.push(new Nodo("Simbolo_Punto_Y_Coma", "\n"));
	this.$.Hijos.push($$[$0]);
break;
case 32:
this.$=new Nodo("ListaInstrucciones", ""); 
	this.$.Hijos.push(new Nodo("Reservada_continue", "break")); 
	this.$.Hijos.push(new Nodo("Simbolo_Punto_Y_Coma", "\n"));
	this.$.Hijos.push($$[$0]);
break;
case 33:
this.$=new Nodo("ListaInstrucciones", ""); 
	this.$.Hijos.push(new Nodo("Reservada_print", "Console.log")); 
	this.$.Hijos.push(new Nodo("Simbolo_Abrir_Parentesis", "("));
	this.$.Hijos.push($$[$0-3]);
	this.$.Hijos.push(new Nodo("Simbolo_Cerrar_Parentesis", ")"));
	this.$.Hijos.push(new Nodo("Simbolo_Punto_Y_Coma", "\n"));
	this.$.Hijos.push($$[$0]);
break;
case 34:
this.$=new Nodo("ListaInstrucciones", ""); 
	this.$.Hijos.push(new Nodo("Reservada_println", "Console.log")); 
	this.$.Hijos.push(new Nodo("Simbolo_Abrir_Parentesis", "("));
	this.$.Hijos.push($$[$0-2]);
	this.$.Hijos.push(new Nodo("Simbolo_Cerrar_Parentesis", ")"));
	this.$.Hijos.push(new Nodo("Simbolo_Punto_Y_Coma", "\n"));
	this.$.Hijos.push($$[$0]);
break;
case 35: case 36: case 37: case 38:
this.$=new Nodo("ListaInstrucciones", ""); this.$.Hijos.push($$[$0-1]); this.$.Hijos.push($$[$0]);
break;
case 39:
this.$=new Nodo("ListaInstrucciones", ""); this.$.Hijos.push(new Nodo("Simbolo_Cerrar_LLaves", "Console.log"));
break;
case 40:
 this.$ = new Nodo("ListaIntrucciones",""); 
    	this.$.Hijos.push(new Nodo("Error", ""));  
		this.$.Hijos.push($$[$0]);
        ListaErrores.push("Sintactico", $$[$0-1], "Token inesperado", this._$.first_line, this._$.first_column);
break;
case 41:
 this.$ = new Nodo("Simbolo_Cerrar_LLaves", "}");
break;
case 42:
this.$ = $$[$0]
break;
case 43:
this.$=new Nodo("Declaracion", "");
	this.$.Hijos.push(new Nodo("ID", $$[$0-2]));
	this.$.Hijos.push($$[$0-1]);
	this.$.Hijos.push(new Nodo("Simbolo_Punto_Y_Coma", "\n"));
break;
case 44:
 this.$ = new Nodo("Declaracion",""); 
    	this.$.Hijos.push(new Nodo("Error", ""));  
		this.$.Hijos.push(new Nodo("Simbolo_Punto_Y_Coma", ""));
        ListaErrores.push("Sintactico", $$[$0-1], "Token inesperado", this._$.first_line, this._$.first_column);
break;
case 45:
this.$=new Nodo("DeclaracionP", "");
	this.$.Hijos.push(new Nodo("Simbolo_Coma", ", "));
	this.$.Hijos.push(new Nodo("ID", $$[$0-1]));
	this.$.Hijos.push($$[$0]);
break;
case 46:
this.$=new Nodo("DeclaracionP", "");
	this.$.Hijos.push(new Nodo("Simbolo_Igual", " = "));
	this.$.Hijos.push($$[$0-1]);
	this.$.Hijos.push($$[$0]);
break;
case 47:
this.$=new Nodo("DeclaracionP", "");
break;
case 48:
this.$=new Nodo("DeclaracionBP", "");
	this.$.Hijos.push(new Nodo("Simbolo_Coma", ", "));
	this.$.Hijos.push(new Nodo("ID", $$[$0-1]));
	this.$.Hijos.push($$[$0]);
break;
case 49:
this.$=new Nodo("DeclaracionBP", "");
break;
case 50:
this.$=new Nodo("Expresion", "");
	this.$.Hijos.push(new Nodo("Simbolo_Mas", ", "));
	this.$.Hijos.push($$[$0]);
break;
case 51:
this.$=new Nodo("Expresion", "");
	this.$.Hijos.push(new Nodo("Simbolo_Menos", ", "));
	this.$.Hijos.push($$[$0]);
break;
case 52:
this.$=new Nodo("Expresion", "");
	this.$.Hijos.push($$[$0]);
break;
case 53:
this.$=new Nodo("Exp", ""); this.$.Hijos.push(new Nodo("Entero", $$[$0-1])); this.$.Hijos.push($$[$0]);
break;
case 54:
this.$=new Nodo("Exp", ""); this.$.Hijos.push(new Nodo("Decimal", $$[$0-1])); this.$.Hijos.push($$[$0]);
break;
case 55:
this.$=new Nodo("Exp", ""); this.$.Hijos.push(new Nodo("Cadena", $$[$0-1])); this.$.Hijos.push($$[$0]);
break;
case 56:
this.$=new Nodo("Exp", ""); this.$.Hijos.push(new Nodo("Caracter", $$[$0-1])); this.$.Hijos.push($$[$0]);
break;
case 57:
this.$=new Nodo("Exp", ""); this.$.Hijos.push(new Nodo("Reservada_true", $$[$0-1])); this.$.Hijos.push($$[$0]);
break;
case 58:
this.$=new Nodo("Exp", ""); this.$.Hijos.push(new Nodo("Reservada_false", $$[$0-1])); this.$.Hijos.push($$[$0]);
break;
case 59:
this.$=new Nodo("Exp", ""); this.$.Hijos.push(new Nodo("ID", $$[$0-2])); this.$.Hijos.push($$[$0-1]); this.$.Hijos.push($$[$0]);
break;
case 60:
this.$=new Nodo("Exp", ""); this.$.Hijos.push(new Nodo("Simbolo_Abrir_Parentesis", "(")); this.$.Hijos.push($$[$0-2]); this.$.Hijos.push(new Nodo("Simbolo_Cerrar_Parentesis", ")")); this.$.Hijos.push($$[$0]);
break;
case 61:
this.$=new Nodo("Exp", ""); this.$.Hijos.push(new Nodo("Simbolo_Negación", $$[$0-2])); this.$.Hijos.push($$[$0-1]);
break;
case 62:
 this.$ = new Nodo("Exp",""); 
    	this.$.Hijos.push(new Nodo("Error", ""));  
        ListaErrores.push("Sintactico", $$[$0-1], "Token inesperado", this._$.first_line, this._$.first_column);
break;
case 63: case 64:
 this.$ = new Nodo("Declaracion","");
break;
case 65:
this.$=new Nodo("Operador", ""); this.$.Hijos.push(new Nodo("Simbolo_Mas", $$[$0-1])); this.$.Hijos.push($$[$0]);
break;
case 66:
this.$=new Nodo("Operador", ""); this.$.Hijos.push(new Nodo("Simbolo_Menos", $$[$0-1])); this.$.Hijos.push($$[$0]);
break;
case 67:
this.$=new Nodo("Operador", ""); this.$.Hijos.push(new Nodo("Simbolo_Asterisco", $$[$0-1])); this.$.Hijos.push($$[$0]);
break;
case 68:
this.$=new Nodo("Operador", ""); this.$.Hijos.push(new Nodo("Simbolo_Diagonal", $$[$0-1])); this.$.Hijos.push($$[$0]);
break;
case 69:
this.$=new Nodo("Operador", ""); this.$.Hijos.push(new Nodo("Simbolo_Adicion", $$[$0-1])); this.$.Hijos.push($$[$0]);
break;
case 70:
this.$=new Nodo("Operador", ""); this.$.Hijos.push(new Nodo("Simbolo_Sustraccion", $$[$0-1])); this.$.Hijos.push($$[$0]);
break;
case 71:
this.$=new Nodo("Operador", ""); this.$.Hijos.push(new Nodo("Simbolo_Comparacion", $$[$0-1])); this.$.Hijos.push($$[$0]);
break;
case 72:
this.$=new Nodo("Operador", ""); this.$.Hijos.push(new Nodo("Simbolo_Mayor", $$[$0-1])); this.$.Hijos.push($$[$0]);
break;
case 73:
this.$=new Nodo("Operador", ""); this.$.Hijos.push(new Nodo("Simbolo_Mayor_Igual", $$[$0-1])); this.$.Hijos.push($$[$0]);
break;
case 74:
this.$=new Nodo("Operador", ""); this.$.Hijos.push(new Nodo("Simbolo_Menor", $$[$0-1])); this.$.Hijos.push($$[$0]);
break;
case 75:
this.$=new Nodo("Operador", ""); this.$.Hijos.push(new Nodo("Simbolo_Menor_Igual", $$[$0-1])); this.$.Hijos.push($$[$0]);
break;
case 76:
this.$=new Nodo("Operador", ""); this.$.Hijos.push(new Nodo("Simbolo_Distinto", $$[$0-1])); this.$.Hijos.push($$[$0]);
break;
case 77:
this.$=new Nodo("Operador", ""); this.$.Hijos.push(new Nodo("Simbolo_AND", $$[$0-1])); this.$.Hijos.push($$[$0]);
break;
case 78:
this.$=new Nodo("Operador", ""); this.$.Hijos.push(new Nodo("Simbolo_OR", $$[$0-1])); this.$.Hijos.push($$[$0]);
break;
case 79:
this.$=new Nodo("Operador", ""); this.$.Hijos.push(new Nodo("Simbolo_Xor", $$[$0-1])); this.$.Hijos.push($$[$0]);
break;
case 80:
this.$=new Nodo("Operador", "");
break;
case 81:
this.$=new Nodo("PosibilidadMetodo", ""); this.$.Hijos.push(new Nodo("Simbolo_Abrir_Parentesis", "(")); this.$.Hijos.push($$[$0-1]); this.$.Hijos.push(new Nodo("Simbolo_Cerrar_Parentesis", ")"));
break;
case 82:
this.$=new Nodo("PosibilidadMetodo", "");
break;
case 83:
this.$=new Nodo("ListaValores", ""); this.$.Hijos.push($$[$0-1]); this.$.Hijos.push($$[$0]);
break;
case 84:
this.$=new Nodo("ListaValores", "");
break;
case 85:
this.$=new Nodo("ListaValoresP", ""); this.$.Hijos.push(new Nodo("Simbolo_Coma", ", ")); this.$.Hijos.push($$[$0-1]); this.$.Hijos.push($$[$0]);
break;
case 86:
this.$=new Nodo("ListaValoresP", "");
break;
case 87:
this.$=new Nodo("SelectorID", ""); this.$.Hijos.push(new Nodo("Simbolo_Abrir_Parentesis", "(")); this.$.Hijos.push($$[$0-2]); this.$.Hijos.push(new Nodo("Simbolo_Cerrar_Parentesis", ")")); this.$.Hijos.push(new Nodo("Simbolo_Punto_Y_Coma", "\n"));
break;
case 88:
this.$=new Nodo("SelectorID", ""); this.$.Hijos.push(new Nodo("Simbolo_Igual", "=")); this.$.Hijos.push($$[$0-1]); this.$.Hijos.push(new Nodo("Simbolo_Punto_Y_Coma", "\n"));
break;
case 89:
this.$=new Nodo("SelectorID", ""); this.$.Hijos.push(new Nodo("Simbolo_Adicion", "++")); this.$.Hijos.push(new Nodo("Simbolo_Punto_Y_Coma", "\n"));
break;
case 90:
this.$=new Nodo("SelectorID", ""); this.$.Hijos.push(new Nodo("Simbolo_Sustraccion", "--")); this.$.Hijos.push(new Nodo("Simbolo_Punto_Y_Coma", "\n"));
break;
case 91: case 94:
 this.$ = new Nodo("SelectorID",""); 
    	this.$.Hijos.push(new Nodo("Error", ""));  
        ListaErrores.push("Sintactico", $$[$0-1], "Token inesperado", this._$.first_line, this._$.first_column);
break;
case 92:
this.$=new Nodo("ValoresReturn", ""); this.$.Hijos.push($$[$0-1]); this.$.Hijos.push(new Nodo("Simbolo_Punto_Y_Coma", "\n"));
break;
case 93:
this.$=new Nodo("ValoresReturn", ""); this.$.Hijos.push(new Nodo("Simbolo_Punto_Y_Coma", "\n"));
break;
case 95:
this.$=new Nodo("SentenciaIF", ""); 
	this.$.Hijos.push(new Nodo("Reservada_if", "if ")); 
	this.$.Hijos.push(new Nodo("Simbolo_Abrir_Parentesis", "("));
	this.$.Hijos.push($$[$0-5]);
	this.$.Hijos.push(new Nodo("Simbolo_Cerrar_Parentesis", ")"));
	this.$.Hijos.push(new Nodo("Simbolo_Abrir_LLaves", "{"));
	this.$.Hijos.push($$[$0-2]);
	this.$.Hijos.push(new Nodo("Simbolo_Cerrar_LLaves", "}\n"));
	this.$.Hijos.push($$[$0]);
break;
case 96: case 101:
 this.$ = new Nodo("SentenciaIF",""); 
    	this.$.Hijos.push(new Nodo("Error", ""));  
        ListaErrores.push("Sintactico", $$[$0-1], "Token inesperado", this._$.first_line, this._$.first_column);
break;
case 97:
this.$=new Nodo("CaminosIF", "");
	this.$.Hijos.push(new Nodo("Reservada_else", "else\n"));
	this.$.Hijos.push($$[$0]);
break;
case 99:
this.$=new Nodo("OpcionElse", ""); this.$.Hijos.push($$[$0]);
break;
case 100:
this.$=new Nodo("OpcionElse", ""); 
	this.$.Hijos.push(new Nodo("Simbolo_Abrir_LLaves", "{\n"));
	this.$.Hijos.push($$[$0-1]);
	this.$.Hijos.push(new Nodo("Simbolo_Cerrar_LLaves", "}\n"));
break;
case 102:
this.$=new Nodo("SentenciaFor", ""); 
	this.$.Hijos.push(new Nodo("Reservada_for", "for"));
	this.$.Hijos.push(new Nodo("Simbolo_Abrir_Parentesis", "("));
	this.$.Hijos.push($$[$0-8]);
	this.$.Hijos.push($$[$0-7]);
	this.$.Hijos[3].Hijos[2].Traduccion = ";";
	this.$.Hijos.push($$[$0-6]);
	this.$.Hijos.push(new Nodo("Simbolo_Punto_Y_Coma", ")"));
	this.$.Hijos.push($$[$0-4]);
	this.$.Hijos.push(new Nodo("Simbolo_Cerrar_Parentesis", ")"));
	this.$.Hijos.push(new Nodo("Simbolo_Abrir_LLaves", "{"));
	this.$.Hijos.push($$[$0-1]);
	this.$.Hijos.push(new Nodo("Simbolo_Cerrar_LLaves", "}\n"));
break;
case 103:
 this.$ = new Nodo("SentenciaFor",""); 
    	this.$.Hijos.push(new Nodo("Error", ""));  
        ListaErrores.push("Sintactico", $$[$0-1], "Token inesperado", this._$.first_line, this._$.first_column);
break;
case 104:
this.$=new Nodo("SentenciaWhile", ""); 
	this.$.Hijos.push(new Nodo("Reservada_while", "for"));
	this.$.Hijos.push(new Nodo("Simbolo_Abrir_Parentesis", "("));
	this.$.Hijos.push($$[$0-4]);
	this.$.Hijos.push(new Nodo("Simbolo_Cerrar_Parentesis", ")"));
	this.$.Hijos.push(new Nodo("Simbolo_Abrir_LLaves", "{"));
	this.$.Hijos.push($$[$0-1]);
	this.$.Hijos.push(new Nodo("Simbolo_Cerrar_LLaves", "}\n"));
break;
case 105:
 this.$ = new Nodo("SentenciaWhile",""); 
    	this.$.Hijos.push(new Nodo("Error", ""));  
        ListaErrores.push("Sintactico", $$[$0-1], "Token inesperado", this._$.first_line, this._$.first_column);
break;
case 106:
this.$=new Nodo("SentenciaDo", ""); 
	this.$.Hijos.push(new Nodo("Reservada_do", "for"));
	this.$.Hijos.push(new Nodo("Simbolo_Abrir_LLaves", "{"));
	this.$.Hijos.push($$[$0-6]);
	this.$.Hijos.push(new Nodo("Simbolo_Cerrar_LLaves", "}"));
	this.$.Hijos.push(new Nodo("Reservada_while", "for"));
	this.$.Hijos.push(new Nodo("Simbolo_Abrir_Parentesis", "("));
	this.$.Hijos.push($$[$0-2]);
	this.$.Hijos.push(new Nodo("Simbolo_Cerrar_Parentesis", ")"));
	this.$.Hijos.push(new Nodo("Simbolo_Punto_Y_Coma", "\n"));
break;
case 107:
 this.$ = new Nodo("SentenciaDo",""); 
    	this.$.Hijos.push(new Nodo("Error", ""));  
        ListaErrores.push("Sintactico", $$[$0-1], "Token inesperado", this._$.first_line, this._$.first_column);
break;
case 108:
this.$=new Nodo("ListaDefiniones", "");
	this.$.Hijos.push($$[$0-1]);
	this.$.Hijos.push($$[$0]);
break;
case 109:
this.$=new Nodo("ListaDefiniones", "");
	this.$.Hijos.push(new Nodo("Reservada_public", ""));
	this.$.Hijos.push($$[$0-1]);
	this.$.Hijos.push($$[$0]);
break;
case 110:
this.$=new Nodo("ListaDefiniones", ""); this.$.Hijos.push(new Nodo("Simbolo_Cerrar_LLaves", "}\n\n"));
break;
case 111:
 this.$ = new Nodo("ListaDefiniones",""); 
    	this.$.Hijos.push(new Nodo("Error", ""));  
		this.$.Hijos.push($$[$0]);
        ListaErrores.push("Sintactico", $$[$0-2], "Token inesperado", this._$.first_line, this._$.first_column);
break;
case 112:
this.$=new Nodo("SelectorDefincion", "");
	this.$.Hijos.push(new Nodo("Reservada_void", ""));
	this.$.Hijos.push(new Nodo("ID", ""));
	this.$.Hijos.push(new Nodo("Simbolo_Abrir_Parentesis", ""));
	this.$.Hijos.push($$[$0-1]);
	this.$.Hijos.push(new Nodo("Simbolo_Punto_Y_Coma", ""));
break;
case 113:
this.$=new Nodo("SelectorDefincion", "");
	this.$.Hijos.push($$[$0-4]);
	this.$.Hijos.push(new Nodo("ID", ""));
	this.$.Hijos.push(new Nodo("Simbolo_Abrir_Parentesis", ""));
	this.$.Hijos.push($$[$0-1]);
	this.$.Hijos.push(new Nodo("Simbolo_Punto_Y_Coma", ""));
break;
case 114:
 this.$ = new Nodo("SelectorDefincion",""); 
    	this.$.Hijos.push(new Nodo("Error", ""));  
        ListaErrores.push("Sintactico", $$[$0-1], "Token inesperado", this._$.first_line, this._$.first_column);
break;
}
},
table: [{2:$V0,3:1,4:2,5:$V1,7:$V2},{1:[3]},{1:[2,1]},{2:[1,9],6:6,9:[1,7],13:[1,8]},{1:[2,3]},{8:[1,10]},{2:$V0,4:11,5:$V1,7:$V2},{10:[1,12]},{10:[1,13]},{8:[1,14]},{2:$V0,4:15,5:$V1,7:$V2},{1:[2,2]},{11:[1,16]},{11:[1,17]},o($V3,[2,7]),{1:[2,4]},{2:$V4,5:$V5,8:$V6,12:18,16:20,24:$V7,35:$V8,36:$V9,37:$Va,38:$Vb},{14:[1,28]},o($V3,[2,5]),{2:[1,33],15:29,20:[1,30],21:[1,31],31:[1,32]},{2:[1,36],10:[1,35],17:34},o($V3,$Vc),o($Vc,[2,27],{18:37,8:[1,39],19:[1,38]}),o($Vc,[2,22]),o($Vc,[2,23]),o($Vc,[2,24]),o($Vc,[2,25]),o($Vc,[2,26]),o($V3,[2,6]),{2:$V4,5:$V5,8:$V6,12:40,16:20,24:$V7,35:$V8,36:$V9,37:$Va,38:$Vb},{21:[1,41]},{10:[1,42]},{10:[1,43]},{8:[1,44]},{2:$V4,5:$V5,8:$V6,12:45,16:20,24:$V7,35:$V8,36:$V9,37:$Va,38:$Vb},{19:$Vd,34:$Ve,53:46,54:$Vf},{19:[1,49]},{2:$V4,5:$V5,8:$V6,12:50,16:20,24:$V7,35:$V8,36:$V9,37:$Va,38:$Vb},o($Vg,[2,12]),o($Vg,[2,13]),o($V3,[2,8]),{22:[1,51]},{23:[1,52]},{23:[1,53]},o($Vg,[2,17]),o($V3,[2,9]),{19:[1,54]},{10:[1,55]},{2:$Vh,10:$Vi,23:$Vj,46:56,57:$Vk,58:59,59:$Vl,60:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,68:$Vs},o($Vg,[2,44]),o($V3,[2,11]),{23:[1,70]},{28:$Vt,30:71,32:$Vu},{11:$Vt,30:73,32:$Vu},o($Vg,[2,43]),{19:$Vd,34:$Ve,53:74,54:$Vf},{55:[1,75]},{2:$Vh,10:$Vi,23:$Vj,58:76,60:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,68:$Vs},{2:$Vh,10:$Vi,23:$Vj,58:77,60:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,68:$Vs},o($Vv,[2,52]),o($Vv,$Vw,{61:78,57:$Vx,59:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL}),o($Vv,$Vw,{61:94,57:$Vx,59:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL}),o($Vv,$Vw,{61:95,57:$Vx,59:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL}),o($Vv,$Vw,{61:96,57:$Vx,59:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL}),o($Vv,$Vw,{61:97,57:$Vx,59:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL}),o($Vv,$Vw,{61:98,57:$Vx,59:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL}),o($VM,[2,82],{67:99,23:[1,100]}),{2:$Vh,10:$Vi,23:$Vj,46:101,57:$Vk,58:59,59:$Vl,60:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,68:$Vs},{69:[1,102]},{19:[1,104],28:[1,105],70:103},{24:[1,106]},{28:[1,107]},{10:[1,108]},{11:[1,109]},{19:[2,45]},{19:[2,46]},o($Vv,[2,50]),o($Vv,[2,51]),o($Vv,[2,53]),{2:$Vh,10:$Vi,23:$Vj,58:110,60:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,68:$Vs},{2:$Vh,10:$Vi,23:$Vj,58:111,60:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,68:$Vs},{2:$Vh,10:$Vi,23:$Vj,58:112,60:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,68:$Vs},{2:$Vh,10:$Vi,23:$Vj,58:113,60:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,68:$Vs},o($Vv,$Vw,{61:114,57:$Vx,59:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL}),o($Vv,$Vw,{61:115,57:$Vx,59:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL}),{2:$Vh,10:$Vi,23:$Vj,58:116,60:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,68:$Vs},{2:$Vh,10:$Vi,23:$Vj,58:117,60:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,68:$Vs},{2:$Vh,10:$Vi,23:$Vj,58:118,60:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,68:$Vs},{2:$Vh,10:$Vi,23:$Vj,58:119,60:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,68:$Vs},{2:$Vh,10:$Vi,23:$Vj,58:120,60:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,68:$Vs},{2:$Vh,10:$Vi,23:$Vj,58:121,60:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,68:$Vs},{2:$Vh,10:$Vi,23:$Vj,58:122,60:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,68:$Vs},{2:$Vh,10:$Vi,23:$Vj,58:123,60:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,68:$Vs},{2:$Vh,10:$Vi,23:$Vj,58:124,60:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,68:$Vs},o($Vv,[2,54]),o($Vv,[2,55]),o($Vv,[2,56]),o($Vv,[2,57]),o($Vv,[2,58]),o($Vv,$Vw,{61:125,57:$Vx,59:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL}),{2:$Vh,10:$Vi,23:$Vj,28:[2,84],46:127,57:$Vk,58:59,59:$Vl,60:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,68:$Vs,84:126},{28:[1,128]},{2:$Vh,10:$Vi,23:$Vj,58:129,60:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,68:$Vs},o($Vv,[2,62]),o($Vv,[2,63]),o($Vv,[2,64]),{25:[1,130]},{11:[1,131]},{28:$VN,33:132,34:$VO},{29:[1,134]},o($Vv,[2,65]),o($Vv,[2,66]),o($Vv,[2,67]),o($Vv,[2,68]),o($Vv,[2,69]),o($Vv,[2,70]),o($Vv,[2,71]),o($Vv,[2,72]),o($Vv,[2,73]),o($Vv,[2,74]),o($Vv,[2,75]),o($Vv,[2,76]),o($Vv,[2,77]),o($Vv,[2,78]),o($Vv,[2,79]),o($Vv,[2,59]),{28:[1,135]},{28:$VP,34:$VQ,85:136},o($Vv,$Vw,{61:138,57:$Vx,59:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL}),o($Vv,[2,61]),{26:[1,139]},{29:[1,140]},{28:[1,141]},{32:[1,142]},o($Vg,[2,16]),o($VM,[2,81]),{28:[2,83]},{2:$Vh,10:$Vi,23:$Vj,46:143,57:$Vk,58:59,59:$Vl,60:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,68:$Vs},o($Vv,[2,60]),{27:[1,144]},o($Vg,[2,15]),o([11,28],[2,18]),{10:[1,145]},{28:$VP,34:$VQ,85:146},{28:[1,147]},{28:$VN,33:148,34:$VO},{28:[2,85]},{11:[1,149]},{28:[2,20]},{29:[1,150]},o($Vg,[2,14])],
defaultActions: {2:[2,1],4:[2,3],11:[2,2],15:[2,4],74:[2,45],75:[2,46],136:[2,83],146:[2,85],148:[2,20]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    //let CNodoError=require('../JavaAST/NodoError');
    const Nodo = require("./nodo");

    class Token {
    	constructor(Tipo, Lexema, Fila, Columna) {
			this.Tipo = Tipo;
			this.Lexema = Lexema;
			this.Fila = Fila
			this.Columna = Columna
		}
    }

	class Error {
    	constructor(Tipo, Lexema, Descripcion, Fila, Columna) {
			this.Tipo = Tipo;
			this.Lexema = Lexema;
			this.Descripcion = Descripcion
			this.Fila = Fila
			this.Columna = Columna
		}
    }

	var ListaErrores = new Array();
	var ListaTokens = new Array();

	var traductor= "";
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:ListaTokens.push(new Token('Reservada_public', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 5;
break;
case 1:ListaTokens.push(new Token('Reservada_class', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 9;
break;
case 2:ListaTokens.push(new Token('Reservada_interface', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 13;
break;
case 3:ListaTokens.push(new Token('Reservada_void', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 21;
break;
case 4:ListaTokens.push(new Token('Reservada_int', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 35;
break;
case 5:ListaTokens.push(new Token('Reservada_double', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 36;
break;
case 6:ListaTokens.push(new Token('Reservada_char', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 37;
break;
case 7:ListaTokens.push(new Token('Reservada_String', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 24;
break;
case 8:ListaTokens.push(new Token('Reservada_boolean', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 38;
break;
case 9:ListaTokens.push(new Token('Reservada_for', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 91;
break;
case 10:ListaTokens.push(new Token('Reservada_while', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 92;
break;
case 11:ListaTokens.push(new Token('Reservada_println', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 47;
break;
case 12:ListaTokens.push(new Token('Reservada_print', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 45;
break;
case 13:ListaTokens.push(new Token('Reservada_do', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 93;
break;
case 14:ListaTokens.push(new Token('Reservada_if', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 87;
break;
case 15:ListaTokens.push(new Token('Reservada_else', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 89;
break;
case 16:ListaTokens.push(new Token('Reservada_break', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 44;
break;
case 17:ListaTokens.push(new Token('Reservada_continue', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 43;
break;
case 18:ListaTokens.push(new Token('Reservada_return', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 41;
break;
case 19:ListaTokens.push(new Token('Reservada_static', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 20;
break;
case 20:ListaTokens.push(new Token('Reservada_main', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 22;
break;
case 21:ListaTokens.push(new Token('Reservada_args', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 27;
break;
case 22:ListaTokens.push(new Token('Reservada_true', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 65;
break;
case 23:ListaTokens.push(new Token('Reservada_false', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 66;
break;
case 24:ListaTokens.push(new Token('Simbolo_AND', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 81;
break;
case 25:ListaTokens.push(new Token('Simbolo_OR', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 82;
break;
case 26:ListaTokens.push(new Token('Simbolo_Adicion', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 73;
break;
case 27:ListaTokens.push(new Token('Simbolo_Mas', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 57;
break;
case 28:ListaTokens.push(new Token('Simbolo_Sustraccion', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 74;
break;
case 29:ListaTokens.push(new Token('Simbolo_Menos', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 59;
break;
case 30:ListaTokens.push(new Token('Simbolo_Asterisco', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 71;
break;
case 31:ListaTokens.push(new Token('Simbolo_Diagonal', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 72;
break;
case 32:ListaTokens.push(new Token('Simbolo_Comparacion', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 75;
break;
case 33:ListaTokens.push(new Token('Simbolo_Igual', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 54;
break;
case 34:ListaTokens.push(new Token('Simbolo_Mayor_Igual', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 77;
break;
case 35:ListaTokens.push(new Token('Simbolo_Mayor', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 76;
break;
case 36:ListaTokens.push(new Token('Simbolo_Menor_Igual', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 79;
break;
case 37:ListaTokens.push(new Token('Simbolo_Menor', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 78;
break;
case 38:ListaTokens.push(new Token('Simbolo_Distinto', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 80;
break;
case 39:ListaTokens.push(new Token('Simbolo_Negación', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'Simbolo_Negación';
break;
case 40:ListaTokens.push(new Token('Simbolo_Abrir_LLaves', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 11;
break;
case 41:ListaTokens.push(new Token('Simbolo_Cerrar_LLaves', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 8;
break;
case 42:ListaTokens.push(new Token('Simbolo_Abrir_Parentesis', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 23;
break;
case 43:ListaTokens.push(new Token('Simbolo_Cerrar_Parentesis', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 28;
break;
case 44:ListaTokens.push(new Token('Simbolo_Punto_Y_Coma', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 19;
break;
case 45:ListaTokens.push(new Token('Simbolo_Punto', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'Simbolo_Punto';
break;
case 46:ListaTokens.push(new Token('Simbolo_Coma', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 34;
break;
case 47:ListaTokens.push(new Token('Simbolo_Abrir_Corchete', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 25;
break;
case 48:ListaTokens.push(new Token('Simbolo_Cerrar_Corchete', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 26;
break;
case 49:ListaTokens.push(new Token('Simbolo_Xor', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 83;
break;
case 50:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); ListaTokens.push(new Token('Cadena', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 63; 
break;
case 51:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); ListaTokens.push(new Token('Caracter', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 64; 
break;
case 52:ListaTokens.push(new Token('Decimal', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 62;
break;
case 53:ListaTokens.push(new Token('Entero', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 60;
break;
case 54:ListaTokens.push(new Token('ID', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 10;
break;
case 55:return 7;
break;
case 56: ListaError.push(new Error('Lexico', yy_.yytext, "Simbolo no perteneciente al lenguaje", yy_.yylloc.first_line, yy_.yylloc.first_column));
break;
}
},
rules: [/^(?:\s+\/\/.*[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/]public\b)/i,/^(?:class\b)/i,/^(?:interface\b)/i,/^(?:void\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:String\b)/i,/^(?:boolean\b)/i,/^(?:for\b)/i,/^(?:while\b)/i,/^(?:System\.out\.println\b)/i,/^(?:System\.out\.print\b)/i,/^(?:do\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:static\b)/i,/^(?:main\b)/i,/^(?:args\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:\+\+)/i,/^(?:\+)/i,/^(?:--)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:==)/i,/^(?:=)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:!=)/i,/^(?:!)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\()/i,/^(?:\))/i,/^(?:;)/i,/^(?:\.)/i,/^(?:,)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\^)/i,/^(?:"[^\"]*")/i,/^(?:'[^\"]')/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:[0-9]+\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}