/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[1,3],$V2=[1,4],$V3=[1,20],$V4=[1,18],$V5=[1,17],$V6=[1,24],$V7=[1,21],$V8=[1,22],$V9=[1,23],$Va=[1,25],$Vb=[1,30],$Vc=[1,28],$Vd=[1,29],$Ve=[1,31],$Vf=[2,5,7],$Vg=[1,39],$Vh=[1,38],$Vi=[2,43],$Vj=[1,46],$Vk=[1,47],$Vl=[2,5,7,8,24,33,34,35,36],$Vm=[1,69],$Vn=[1,70],$Vo=[1,60],$Vp=[1,61],$Vq=[1,63],$Vr=[1,64],$Vs=[1,65],$Vt=[1,66],$Vu=[1,67],$Vv=[1,68],$Vw=[1,71],$Vx=[19,28,32],$Vy=[2,75],$Vz=[1,83],$VA=[1,84],$VB=[1,85],$VC=[1,86],$VD=[1,87],$VE=[1,88],$VF=[1,89],$VG=[1,90],$VH=[1,91],$VI=[1,92],$VJ=[1,93],$VK=[1,94],$VL=[1,95],$VM=[1,96],$VN=[1,97],$VO=[19,28,32,53,55,67,68,69,70,71,72,73,74,75,76,77,78,79],$VP=[2,17],$VQ=[2,79],$VR=[2,81],$VS=[1,143],$VT=[19,28],$VU=[2,19],$VV=[1,148],$VW=[2,5,8,10],$VX=[1,165],$VY=[1,153],$VZ=[1,155],$V_=[1,156],$V$=[1,157],$V01=[1,158],$V11=[1,159],$V21=[1,160],$V31=[1,166],$V41=[1,167],$V51=[1,168],$V61=[1,169],$V71=[2,5,8,24,33,34,35,36],$V81=[2,5,8,10,24,33,34,35,36,38,40,41,42,44,82,84,86,87,88],$V91=[2,8,10,24,33,34,35,36,38,40,41,42,44,82,86,87,88];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"Inicio":3,"Lista":4,"Reservada_public":5,"Selector":6,"EOF":7,"Simbolo_Cerrar_LLaves":8,"Reservada_class":9,"ID":10,"Simbolo_Abrir_LLaves":11,"ListaMetodos":12,"Reservada_interface":13,"ListaDefiniones":14,"SelectorMetodo":15,"TiposVariables":16,"Declaracion":17,"RecuperacionM":18,"Simbolo_Punto_Y_Coma":19,"Reservada_static":20,"Reservada_void":21,"Reservada_main":22,"Simbolo_Abrir_Parentesis":23,"Reservada_String":24,"Simbolo_Abrir_Corchete":25,"Simbolo_Cerrar_Corchete":26,"Reservada_args":27,"Simbolo_Cerrar_Parentesis":28,"ListaIntrucciones":29,"ListaParametros":30,"ListaParametrosP":31,"Simbolo_Coma":32,"Reservada_int":33,"Reservada_double":34,"Reservada_char":35,"Reservada_boolean":36,"SelectorID":37,"Reservada_return":38,"ValoresReturn":39,"Reservada_continue":40,"Reservada_break":41,"Reservada_print":42,"Expresion":43,"Reservada_println":44,"SentenciaIF":45,"SentenciaFor":46,"SentenciaWhile":47,"SentenciaDo":48,"RecuperacionI":49,"DeclaracionP":50,"Simbolo_Igual":51,"DeclaracionBP":52,"Simbolo_Mas":53,"Exp":54,"Simbolo_Menos":55,"Entero":56,"Operador":57,"Decimal":58,"Cadena":59,"Caracter":60,"Reservada_true":61,"Reservada_false":62,"PosibilidadMetodo":63,"Simbolo_Negaci":64,"n":65,"RecuperacionE":66,"Simbolo_Asterisco":67,"Simbolo_Diagonal":68,"Simbolo_Adicion":69,"Simbolo_Sustraccion":70,"Simbolo_Comparacion":71,"Simbolo_Mayor":72,"Simbolo_Mayor_Igual":73,"Simbolo_Menor":74,"Simbolo_Menor_Igual":75,"Simbolo_Distinto":76,"Simbolo_AND":77,"Simbolo_OR":78,"Simbolo_Xor":79,"ListaValores":80,"ListaValoresP":81,"Reservada_if":82,"CaminosIF":83,"Reservada_else":84,"OpcionElse":85,"Reservada_for":86,"Reservada_while":87,"Reservada_do":88,"SelectorDefincion":89,"RecuperacionD":90,"TipoVariables":91,"$accept":0,"$end":1},
terminals_: {2:"error",5:"Reservada_public",7:"EOF",8:"Simbolo_Cerrar_LLaves",9:"Reservada_class",10:"ID",11:"Simbolo_Abrir_LLaves",13:"Reservada_interface",19:"Simbolo_Punto_Y_Coma",20:"Reservada_static",21:"Reservada_void",22:"Reservada_main",23:"Simbolo_Abrir_Parentesis",24:"Reservada_String",25:"Simbolo_Abrir_Corchete",26:"Simbolo_Cerrar_Corchete",27:"Reservada_args",28:"Simbolo_Cerrar_Parentesis",32:"Simbolo_Coma",33:"Reservada_int",34:"Reservada_double",35:"Reservada_char",36:"Reservada_boolean",38:"Reservada_return",40:"Reservada_continue",41:"Reservada_break",42:"Reservada_print",44:"Reservada_println",51:"Simbolo_Igual",53:"Simbolo_Mas",55:"Simbolo_Menos",56:"Entero",58:"Decimal",59:"Cadena",60:"Caracter",61:"Reservada_true",62:"Reservada_false",64:"Simbolo_Negaci",65:"n",67:"Simbolo_Asterisco",68:"Simbolo_Diagonal",69:"Simbolo_Adicion",70:"Simbolo_Sustraccion",71:"Simbolo_Comparacion",72:"Simbolo_Mayor",73:"Simbolo_Mayor_Igual",74:"Simbolo_Menor",75:"Simbolo_Menor_Igual",76:"Simbolo_Distinto",77:"Simbolo_AND",78:"Simbolo_OR",79:"Simbolo_Xor",82:"Reservada_if",84:"Reservada_else",86:"Reservada_for",87:"Reservada_while",88:"Reservada_do",91:"TipoVariables"},
productions_: [0,[3,1],[4,3],[4,1],[4,3],[6,4],[6,4],[12,1],[12,3],[12,3],[12,3],[18,1],[18,1],[15,11],[15,7],[15,7],[30,3],[30,0],[31,4],[31,0],[16,1],[16,1],[16,1],[16,1],[16,1],[29,1],[29,3],[29,3],[29,3],[29,3],[29,3],[29,6],[29,6],[29,2],[29,2],[29,2],[29,2],[29,2],[49,1],[49,2],[17,3],[50,3],[50,3],[50,0],[52,3],[52,0],[43,2],[43,2],[43,1],[54,2],[54,2],[54,2],[54,2],[54,2],[54,2],[54,3],[54,4],[54,3],[66,1],[66,1],[57,2],[57,2],[57,2],[57,2],[57,2],[57,2],[57,2],[57,2],[57,2],[57,2],[57,2],[57,2],[57,2],[57,2],[57,2],[57,0],[63,3],[63,0],[80,2],[80,0],[81,3],[81,0],[37,4],[37,3],[37,2],[37,2],[39,2],[39,1],[45,7],[83,2],[83,0],[85,1],[85,2],[46,10],[47,6],[48,8],[14,2],[14,3],[14,1],[14,2],[90,2],[90,1],[89,5],[89,5]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

		this.$=new Nodo("Inicio","");
        this.$.Hijos.push($$[$0]);
        Raiz=this.$;
        var retorno={
			raiz:Raiz,
			Errores: ListaErrores,
			Tokens: ListaTokens
        };
        ListaErrores = new Array();
        ListaTokens = new Array();
        return retorno;
	
break;
case 2:
this.$=new Nodo("Lista", "");
										this.$.Hijos.push(new Nodo("Reservada_public", ""));
										this.$.Hijos.push($$[$0-1]);
										this.$.Hijos.push($$[$0]);
break;
case 3:
 this.$=new Nodo("Lista", "");
break;
case 4:
 this.$ = new Nodo("Lista",""); 
    	this.$.Hijos.push(new Nodo("Error", ""));  
		this.$.Hijos.push($$[$0]);
        ListaErrores.push(new Error("Sintactico", $$[$0-2], "Token inesperado", this._$.first_line, this._$.first_column));
break;
case 5:
this.$=new Nodo("Selector", ""); 
															this.$.Hijos.push(new Nodo("Reservada_class", "class ")); 
															this.$.Hijos.push(new Nodo("ID", $$[$0-2]));
															this.$.Hijos.push(new Nodo("Simbolo_Abrir_LLaves", "{\n"));
															this.$.Hijos.push($$[$0]);
break;
case 6:
this.$=new Nodo("SelectorI", ""); 
																	this.$.Hijos.push(new Nodo("Reservada_interface", "")); 
																	this.$.Hijos.push(new Nodo("ID", ""));
																	this.$.Hijos.push(new Nodo("Simbolo_Abrir_LLaves", ""));
																	this.$.Hijos.push($$[$0]);
																	;
break;
case 7:
this.$=new Nodo("ListaMetodos", ""); this.$.Hijos.push(new Nodo("Simbolo_Cerrar_LLaves", "\n}\n\n"));
break;
case 8:
this.$=new Nodo("ListaMetodos", "");
													this.$.Hijos.push(new Nodo("Reservada_public", ""));
													this.$.Hijos.push($$[$0-1]);
													this.$.Hijos.push($$[$0]);
break;
case 9:
this.$=new Nodo("ListaMetodos", "");
								this.$.Hijos.push($$[$0-2]);
								this.$.Hijos.push($$[$0-1]);
								this.$.Hijos.push($$[$0]);
break;
case 10:
 this.$ = new Nodo("ListaMetodos",""); 
    	this.$.Hijos.push(new Nodo("Error", ""));  
		this.$.Hijos.push($$[$0]);
        ListaErrores.push(new Error("Sintactico", yytext, "Token inesperado", this._$.first_line, this._$.first_column));
break;
case 11: case 12: case 101:
this.$=new Nodo("RecuperacionM", "");
break;
case 13:
this.$=new Nodo("SelectorMetodo", "");
	this.$.Hijos.push(new Nodo("Reservada_static", "function "));
    this.$.Hijos.push(new Nodo("Reservada_void", ""));
	this.$.Hijos.push(new Nodo("Reservada_main", "main"));
	this.$.Hijos.push(new Nodo("Simbolo_Abrir_Parentesis", "("));
	this.$.Hijos.push(new Nodo("Reservada_String", ""));
	this.$.Hijos.push(new Nodo("Simbolo_Abrir_Corchete", ""));
	this.$.Hijos.push(new Nodo("Simbolo_Cerrar_Corchete", ""));
	this.$.Hijos.push(new Nodo("Reservada_args", ""));
	this.$.Hijos.push(new Nodo("Simbolo_Cerrar_Parentesis", ")"));
	this.$.Hijos.push(new Nodo("Simbolo_Abrir_LLaves", "{\n"));
	this.$.Hijos.push($$[$0]);
break;
case 14:
this.$=new Nodo("SelectorMetodo", "");
	this.$.Hijos.push(new Nodo("Reservada_void", "function "));
	this.$.Hijos.push(new Nodo("ID", $$[$0-5]));
	this.$.Hijos.push(new Nodo("Simbolo_Abrir_Parentesis", "("));
	this.$.Hijos.push($$[$0-3]);
	this.$.Hijos.push(new Nodo("Simbolo_Cerrar_Parentesis", ")"));
	this.$.Hijos.push(new Nodo("Simbolo_Abrir_LLaves", "{\n"))
	this.$.Hijos.push($$[$0]);
break;
case 15:
this.$=new Nodo("SelectorMetodo", "");
	this.$.Hijos.push($$[$0-6]);
	this.$.Hijos[0].Hijos[0].Traduccion = "function ";
	this.$.Hijos.push(new Nodo("ID", $$[$0-5]));
	this.$.Hijos.push(new Nodo("Simbolo_Abrir_Parentesis", "("));
	this.$.Hijos.push($$[$0-3]);
	this.$.Hijos.push(new Nodo("Simbolo_Cerrar_Parentesis", ")"));
	this.$.Hijos.push(new Nodo("Simbolo_Abrir_LLaves", "{\n"));
	this.$.Hijos.push($$[$0]);
break;
case 16:
this.$=new Nodo("ListaParametros", "");
	this.$.Hijos.push($$[$0-2]);
	this.$.Hijos[0].Hijos[0].Traduccion = "";
	this.$.Hijos.push(new Nodo("ID", $$[$0-1]));
	this.$.Hijos.push($$[$0]);
break;
case 17:
this.$=new Nodo("ListaParametros", "");
break;
case 18:
this.$=new Nodo("ListaParametrosP", "");
	this.$.Hijos.push(new Nodo("Simbolo_Coma", ", "));
	this.$.Hijos.push($$[$0-2]);
	this.$.Hijos[1].Hijos[0].Traduccion = "";
	this.$.Hijos.push(new Nodo("ID", $$[$0-1]));
	this.$.Hijos.push($$[$0]);
break;
case 19:
this.$=new Nodo("ListaParametrosP", "");
break;
case 20:
this.$=new Nodo("TiposVariables", ""); this.$.Hijos.push(new Nodo("Reservada_int", "var "));
break;
case 21:
this.$=new Nodo("TiposVariables", ""); this.$.Hijos.push(new Nodo("Reservada_double", "var "));
break;
case 22:
this.$=new Nodo("TiposVariables", ""); this.$.Hijos.push(new Nodo("Reservada_char", "var "));
break;
case 23:
this.$=new Nodo("TiposVariables", ""); this.$.Hijos.push(new Nodo("Reservada_String", "var "));
break;
case 24:
this.$=new Nodo("TiposVariables", ""); this.$.Hijos.push(new Nodo("Reservada_boolean", "var "));
break;
case 25:
this.$=new Nodo("ListaInstrucciones", ""); this.$.Hijos.push(new Nodo("Simbolo_Cerrar_LLaves", "\n}\n\n"));
break;
case 26:
this.$=new Nodo("ListaInstrucciones", ""); this.$.Hijos.push($$[$0-2]); this.$.Hijos.push($$[$0-1]); this.$.Hijos.push($$[$0]);
break;
case 27:
this.$=new Nodo("ListaInstrucciones", ""); this.$.Hijos.push(new Nodo("ID", $$[$0-2])); this.$.Hijos.push($$[$0-1]); this.$.Hijos.push($$[$0]);
break;
case 28:
this.$=new Nodo("ListaInstrucciones", ""); 
	this.$.Hijos.push(new Nodo("Reservada_return", "return")); 
	this.$.Hijos.push($$[$0-1]); this.$.Hijos.push($$[$0]);
break;
case 29:
this.$=new Nodo("ListaInstrucciones", ""); 
	this.$.Hijos.push(new Nodo("Reservada_continue", "continue")); 
	this.$.Hijos.push(new Nodo("Simbolo_Punto_Y_Coma", "\n"));
	this.$.Hijos.push($$[$0]);
break;
case 30:
this.$=new Nodo("ListaInstrucciones", ""); 
	this.$.Hijos.push(new Nodo("Reservada_continue", "break")); 
	this.$.Hijos.push(new Nodo("Simbolo_Punto_Y_Coma", "\n"));
	this.$.Hijos.push($$[$0]);
break;
case 31:
this.$=new Nodo("ListaInstrucciones", ""); 
	this.$.Hijos.push(new Nodo("Reservada_print", "Console.log")); 
	this.$.Hijos.push(new Nodo("Simbolo_Abrir_Parentesis", "("));
	this.$.Hijos.push($$[$0-3]);
	this.$.Hijos.push(new Nodo("Simbolo_Cerrar_Parentesis", ")"));
	this.$.Hijos.push(new Nodo("Simbolo_Punto_Y_Coma", "\n"));
	this.$.Hijos.push($$[$0]);
break;
case 32:
this.$=new Nodo("ListaInstrucciones", ""); 
	this.$.Hijos.push(new Nodo("Reservada_println", "Console.log")); 
	this.$.Hijos.push(new Nodo("Simbolo_Abrir_Parentesis", "("));
	this.$.Hijos.push($$[$0-3]);
	this.$.Hijos.push(new Nodo("Simbolo_Cerrar_Parentesis", ")"));
	this.$.Hijos.push(new Nodo("Simbolo_Punto_Y_Coma", "\n"));
	this.$.Hijos.push($$[$0]);
break;
case 33: case 34: case 35: case 36:
this.$=new Nodo("ListaInstrucciones", ""); this.$.Hijos.push($$[$0-1]); this.$.Hijos.push($$[$0]);
break;
case 37:
 this.$ = new Nodo("ListaIntrucciones",""); 
    	this.$.Hijos.push(new Nodo("Error", ""));  
		this.$.Hijos.push($$[$0]);
        ListaErrores.push(new Error("Sintactico", $$[$0-1], "Token inesperado", this._$.first_line, this._$.first_column));
break;
case 38:
 this.$ = new Nodo("Simbolo_Cerrar_LLaves", "}");
break;
case 39:
this.$ = $$[$0]
break;
case 40:
this.$=new Nodo("Declaracion", "");
	this.$.Hijos.push(new Nodo("ID", $$[$0-2]));
	this.$.Hijos.push($$[$0-1]);
	this.$.Hijos.push(new Nodo("Simbolo_Punto_Y_Coma", "\n"));
break;
case 41:
this.$=new Nodo("DeclaracionP", "");
	this.$.Hijos.push(new Nodo("Simbolo_Coma", ", "));
	this.$.Hijos.push(new Nodo("ID", $$[$0-1]));
	this.$.Hijos.push($$[$0]);
break;
case 42:
this.$=new Nodo("DeclaracionP", "");
	this.$.Hijos.push(new Nodo("Simbolo_Igual", " = "));
	this.$.Hijos.push($$[$0-1]);
	this.$.Hijos.push($$[$0]);
break;
case 43:
this.$=new Nodo("DeclaracionP", "");
break;
case 44:
this.$=new Nodo("DeclaracionBP", "");
	this.$.Hijos.push(new Nodo("Simbolo_Coma", ", "));
	this.$.Hijos.push(new Nodo("ID", $$[$0-1]));
	this.$.Hijos.push($$[$0]);
break;
case 45:
this.$=new Nodo("DeclaracionBP", "");
break;
case 46:
this.$=new Nodo("Expresion", "");
	this.$.Hijos.push(new Nodo("Simbolo_Mas", "+"));
	this.$.Hijos.push($$[$0]);
break;
case 47:
this.$=new Nodo("Expresion", "");
	this.$.Hijos.push(new Nodo("Simbolo_Menos", "-"));
	this.$.Hijos.push($$[$0]);
break;
case 48:
this.$=new Nodo("Expresion", "");
	this.$.Hijos.push($$[$0]);
break;
case 49:
this.$=new Nodo("Exp", ""); this.$.Hijos.push(new Nodo("Entero", $$[$0-1])); this.$.Hijos.push($$[$0]);
break;
case 50:
this.$=new Nodo("Exp", ""); this.$.Hijos.push(new Nodo("Decimal", $$[$0-1])); this.$.Hijos.push($$[$0]);
break;
case 51:
this.$=new Nodo("Exp", ""); this.$.Hijos.push(new Nodo("Cadena", '"' + $$[$0-1] + '"')); this.$.Hijos.push($$[$0]);
break;
case 52:
this.$=new Nodo("Exp", ""); this.$.Hijos.push(new Nodo("Caracter", "'" + $$[$0-1] + "'")); this.$.Hijos.push($$[$0]);
break;
case 53:
this.$=new Nodo("Exp", ""); this.$.Hijos.push(new Nodo("Reservada_true", $$[$0-1])); this.$.Hijos.push($$[$0]);
break;
case 54:
this.$=new Nodo("Exp", ""); this.$.Hijos.push(new Nodo("Reservada_false", $$[$0-1])); this.$.Hijos.push($$[$0]);
break;
case 55:
this.$=new Nodo("Exp", ""); this.$.Hijos.push(new Nodo("ID", $$[$0-2])); this.$.Hijos.push($$[$0-1]); this.$.Hijos.push($$[$0]);
break;
case 56:
this.$=new Nodo("Exp", ""); this.$.Hijos.push(new Nodo("Simbolo_Abrir_Parentesis", "(")); this.$.Hijos.push($$[$0-2]); this.$.Hijos.push(new Nodo("Simbolo_Cerrar_Parentesis", ")")); this.$.Hijos.push($$[$0]);
break;
case 57:
this.$=new Nodo("Exp", ""); this.$.Hijos.push(new Nodo("Simbolo_Negación", $$[$0-2])); this.$.Hijos.push($$[$0-1]);
break;
case 58: case 59:
 this.$ = new Nodo("Declaracion","");
break;
case 60:
this.$=new Nodo("Operador", ""); this.$.Hijos.push(new Nodo("Simbolo_Mas", " " + $$[$0-1] + " ")); this.$.Hijos.push($$[$0]);
break;
case 61:
this.$=new Nodo("Operador", ""); this.$.Hijos.push(new Nodo("Simbolo_Menos", " " + $$[$0-1] + " ")); this.$.Hijos.push($$[$0]);
break;
case 62:
this.$=new Nodo("Operador", ""); this.$.Hijos.push(new Nodo("Simbolo_Asterisco", " " + $$[$0-1] + " ")); this.$.Hijos.push($$[$0]);
break;
case 63:
this.$=new Nodo("Operador", ""); this.$.Hijos.push(new Nodo("Simbolo_Diagonal", " " + $$[$0-1] + " ")); this.$.Hijos.push($$[$0]);
break;
case 64:
this.$=new Nodo("Operador", ""); this.$.Hijos.push(new Nodo("Simbolo_Adicion", $$[$0-1] + " ")); this.$.Hijos.push($$[$0]);
break;
case 65:
this.$=new Nodo("Operador", ""); this.$.Hijos.push(new Nodo("Simbolo_Sustraccion", $$[$0-1] + " ")); this.$.Hijos.push($$[$0]);
break;
case 66:
this.$=new Nodo("Operador", ""); this.$.Hijos.push(new Nodo("Simbolo_Comparacion", " " + $$[$0-1] + " ")); this.$.Hijos.push($$[$0]);
break;
case 67:
this.$=new Nodo("Operador", ""); this.$.Hijos.push(new Nodo("Simbolo_Mayor", " " + $$[$0-1] + " ")); this.$.Hijos.push($$[$0]);
break;
case 68:
this.$=new Nodo("Operador", ""); this.$.Hijos.push(new Nodo("Simbolo_Mayor_Igual", " " + $$[$0-1] + " ")); this.$.Hijos.push($$[$0]);
break;
case 69:
this.$=new Nodo("Operador", ""); this.$.Hijos.push(new Nodo("Simbolo_Menor", " " + $$[$0-1] + " ")); this.$.Hijos.push($$[$0]);
break;
case 70:
this.$=new Nodo("Operador", ""); this.$.Hijos.push(new Nodo("Simbolo_Menor_Igual", " " + $$[$0-1] + " ")); this.$.Hijos.push($$[$0]);
break;
case 71:
this.$=new Nodo("Operador", ""); this.$.Hijos.push(new Nodo("Simbolo_Distinto", " " + $$[$0-1] + " ")); this.$.Hijos.push($$[$0]);
break;
case 72:
this.$=new Nodo("Operador", ""); this.$.Hijos.push(new Nodo("Simbolo_AND", " " + $$[$0-1] + " ")); this.$.Hijos.push($$[$0]);
break;
case 73:
this.$=new Nodo("Operador", ""); this.$.Hijos.push(new Nodo("Simbolo_OR", " " + $$[$0-1] + " ")); this.$.Hijos.push($$[$0]);
break;
case 74:
this.$=new Nodo("Operador", ""); this.$.Hijos.push(new Nodo("Simbolo_Xor", " " + $$[$0-1] + " ")); this.$.Hijos.push($$[$0]);
break;
case 75:
this.$=new Nodo("Operador", "");
break;
case 76:
this.$=new Nodo("PosibilidadMetodo", ""); this.$.Hijos.push(new Nodo("Simbolo_Abrir_Parentesis", "(")); this.$.Hijos.push($$[$0-1]); this.$.Hijos.push(new Nodo("Simbolo_Cerrar_Parentesis", ")"));
break;
case 77:
this.$=new Nodo("PosibilidadMetodo", "");
break;
case 78:
this.$=new Nodo("ListaValores", ""); this.$.Hijos.push($$[$0-1]); this.$.Hijos.push($$[$0]);
break;
case 79:
this.$=new Nodo("ListaValores", "");
break;
case 80:
this.$=new Nodo("ListaValoresP", ""); this.$.Hijos.push(new Nodo("Simbolo_Coma", ", ")); this.$.Hijos.push($$[$0-1]); this.$.Hijos.push($$[$0]);
break;
case 81:
this.$=new Nodo("ListaValoresP", "");
break;
case 82:
this.$=new Nodo("SelectorID", ""); this.$.Hijos.push(new Nodo("Simbolo_Abrir_Parentesis", "(")); this.$.Hijos.push($$[$0-2]); this.$.Hijos.push(new Nodo("Simbolo_Cerrar_Parentesis", ")")); this.$.Hijos.push(new Nodo("Simbolo_Punto_Y_Coma", "\n"));
break;
case 83:
this.$=new Nodo("SelectorID", ""); this.$.Hijos.push(new Nodo("Simbolo_Igual", "=")); this.$.Hijos.push($$[$0-1]); this.$.Hijos.push(new Nodo("Simbolo_Punto_Y_Coma", "\n"));
break;
case 84:
this.$=new Nodo("SelectorID", ""); this.$.Hijos.push(new Nodo("Simbolo_Adicion", "++")); this.$.Hijos.push(new Nodo("Simbolo_Punto_Y_Coma", "\n"));
break;
case 85:
this.$=new Nodo("SelectorID", ""); this.$.Hijos.push(new Nodo("Simbolo_Sustraccion", "--")); this.$.Hijos.push(new Nodo("Simbolo_Punto_Y_Coma", "\n"));
break;
case 86:
this.$=new Nodo("ValoresReturn", " "); this.$.Hijos.push($$[$0-1]); this.$.Hijos.push(new Nodo("Simbolo_Punto_Y_Coma", "\n"));
break;
case 87:
this.$=new Nodo("ValoresReturn", ""); this.$.Hijos.push(new Nodo("Simbolo_Punto_Y_Coma", "\n"));
break;
case 88:
this.$=new Nodo("SentenciaIF", "");  
	this.$.Hijos.push(new Nodo("Reservada_if", "if "));
	this.$.Hijos.push(new Nodo("Simbolo_Abrir_Parentesis", "("));
	this.$.Hijos.push($$[$0-4]);
	this.$.Hijos.push(new Nodo("Simbolo_Cerrar_Parentesis", ")"));
	this.$.Hijos.push(new Nodo("Simbolo_Abrir_LLaves", "{"));
	this.$.Hijos.push($$[$0-1]);
	this.$.Hijos.push($$[$0]);
break;
case 89:
this.$=new Nodo("CaminosIF", "");
	this.$.Hijos.push(new Nodo("Reservada_else", "else\n"));
	this.$.Hijos.push($$[$0]);
break;
case 91:
this.$=new Nodo("OpcionElse", ""); this.$.Hijos.push($$[$0]);
break;
case 92:
this.$=new Nodo("OpcionElse", ""); 
	this.$.Hijos.push(new Nodo("Simbolo_Abrir_LLaves", "{\n"));
	this.$.Hijos.push($$[$0]);
break;
case 93:
this.$=new Nodo("SentenciaFor", ""); 
	this.$.Hijos.push(new Nodo("Reservada_for", "for"));
	this.$.Hijos.push(new Nodo("Simbolo_Abrir_Parentesis", "("));
	this.$.Hijos.push($$[$0-7]);
	this.$.Hijos.push($$[$0-6]);
	this.$.Hijos[3].Hijos[2].Traduccion = ";";
	this.$.Hijos.push($$[$0-5]);
	this.$.Hijos.push(new Nodo("Simbolo_Punto_Y_Coma", ";"));
	this.$.Hijos.push($$[$0-3]);
	this.$.Hijos.push(new Nodo("Simbolo_Cerrar_Parentesis", ")"));
	this.$.Hijos.push(new Nodo("Simbolo_Abrir_LLaves", "{"));
	this.$.Hijos.push($$[$0]);
break;
case 94:
this.$=new Nodo("SentenciaWhile", ""); 
	this.$.Hijos.push(new Nodo("Reservada_while", "while"));
	this.$.Hijos.push(new Nodo("Simbolo_Abrir_Parentesis", "("));
	this.$.Hijos.push($$[$0-3]);
	this.$.Hijos.push(new Nodo("Simbolo_Cerrar_Parentesis", ")"));
	this.$.Hijos.push(new Nodo("Simbolo_Abrir_LLaves", "{"));
	this.$.Hijos.push($$[$0]);
break;
case 95:
this.$=new Nodo("SentenciaDo", ""); 
	this.$.Hijos.push(new Nodo("Reservada_do", "do"));
	this.$.Hijos.push(new Nodo("Simbolo_Abrir_LLaves", "{"));
	this.$.Hijos.push($$[$0-5]);
	this.$.Hijos.push(new Nodo("Reservada_while", "while"));
	this.$.Hijos.push(new Nodo("Simbolo_Abrir_Parentesis", "("));
	this.$.Hijos.push($$[$0-2]);
	this.$.Hijos.push(new Nodo("Simbolo_Cerrar_Parentesis", ")"));
	this.$.Hijos.push(new Nodo("Simbolo_Punto_Y_Coma", "\n"));
break;
case 96:
this.$=new Nodo("ListaDefiniones", "");
	this.$.Hijos.push($$[$0-1]);
	this.$.Hijos.push($$[$0]);
break;
case 97:
this.$=new Nodo("ListaDefiniones", "");
	this.$.Hijos.push(new Nodo("Reservada_public", ""));
	this.$.Hijos.push($$[$0-1]);
	this.$.Hijos.push($$[$0]);
break;
case 98:
this.$=new Nodo("ListaDefiniones", ""); this.$.Hijos.push(new Nodo("Simbolo_Cerrar_LLaves", "}\n\n"));
break;
case 99:
 this.$ = new Nodo("ListaDefiniones",""); 
    	this.$.Hijos.push(new Nodo("Error", ""));  
		this.$.Hijos.push($$[$0]);
        ListaErrores.push(new Error("Sintactico", $$[$0-1], "Token inesperado", this._$.first_line, this._$.first_column));
break;
case 100:
this.$=$$[$0]
break;
case 102:
this.$=new Nodo("SelectorDefincion", "");
	this.$.Hijos.push(new Nodo("Reservada_void", ""));
	this.$.Hijos.push(new Nodo("ID", ""));
	this.$.Hijos.push(new Nodo("Simbolo_Abrir_Parentesis", ""));
	this.$.Hijos.push($$[$0-1]);
	this.$.Hijos.push(new Nodo("Simbolo_Punto_Y_Coma", ""));
break;
case 103:
this.$=new Nodo("SelectorDefincion", "");
	this.$.Hijos.push($$[$0-4]);
	this.$.Hijos.push(new Nodo("ID", ""));
	this.$.Hijos.push(new Nodo("Simbolo_Abrir_Parentesis", ""));
	this.$.Hijos.push($$[$0-1]);
	this.$.Hijos.push(new Nodo("Simbolo_Punto_Y_Coma", ""));
break;
}
},
table: [{2:$V0,3:1,4:2,5:$V1,7:$V2},{1:[3]},{1:[2,1]},{6:6,9:[1,7],13:[1,8]},{1:[2,3]},{8:[1,9]},{2:$V0,4:10,5:$V1,7:$V2},{10:[1,11]},{10:[1,12]},{2:$V0,4:13,5:$V1,7:$V2},{1:[2,2]},{11:[1,14]},{11:[1,15]},{1:[2,4]},{2:$V3,5:$V4,8:$V5,12:16,16:19,24:$V6,33:$V7,34:$V8,35:$V9,36:$Va},{2:$Vb,5:$Vc,8:$Vd,10:$Ve,14:26,17:27},o($Vf,[2,5]),o($Vf,[2,7]),{15:32,16:35,20:[1,33],21:[1,34],24:$V6,33:$V7,34:$V8,35:$V9,36:$Va},{10:$Ve,17:36},{8:$Vg,18:37,19:$Vh},{10:[2,20]},{10:[2,21]},{10:[2,22]},{10:[2,23]},{10:[2,24]},o($Vf,[2,6]),{2:$Vb,5:$Vc,8:$Vd,10:$Ve,14:40,17:27},{21:[1,42],89:41,91:[1,43]},o($Vf,[2,98]),{8:$Vg,18:44,19:$Vh},{19:$Vi,32:$Vj,50:45,51:$Vk},{2:$V3,5:$V4,8:$V5,12:48,16:19,24:$V6,33:$V7,34:$V8,35:$V9,36:$Va},{21:[1,49]},{10:[1,50]},{10:[1,51]},{2:$V3,5:$V4,8:$V5,12:52,16:19,24:$V6,33:$V7,34:$V8,35:$V9,36:$Va},{2:$V3,5:$V4,8:$V5,12:53,16:19,24:$V6,33:$V7,34:$V8,35:$V9,36:$Va},o($Vl,[2,11]),o($Vl,[2,12]),o($Vf,[2,96]),{2:$Vb,5:$Vc,8:$Vd,10:$Ve,14:54,17:27},{10:[1,55]},{10:[1,56]},o($Vf,[2,99]),{19:[1,57]},{10:[1,58]},{10:$Vm,23:$Vn,43:59,53:$Vo,54:62,55:$Vp,56:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,64:$Vw},o($Vf,[2,8]),{22:[1,72]},{23:[1,73]},{23:[1,74]},o($Vf,[2,9]),o($Vf,[2,10]),o($Vf,[2,97]),{23:[1,75]},{23:[1,76]},o([2,5,8,10,23,24,33,34,35,36,38,40,41,42,44,53,55,56,58,59,60,61,62,64,82,86,87,88],[2,40]),{19:$Vi,32:$Vj,50:77,51:$Vk},{19:[2,45],32:[1,79],52:78},{10:$Vm,23:$Vn,54:80,56:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,64:$Vw},{10:$Vm,23:$Vn,54:81,56:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,64:$Vw},o($Vx,[2,48]),o($Vx,$Vy,{57:82,53:$Vz,55:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN}),o($Vx,$Vy,{57:98,53:$Vz,55:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN}),o($Vx,$Vy,{57:99,53:$Vz,55:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN}),o($Vx,$Vy,{57:100,53:$Vz,55:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN}),o($Vx,$Vy,{57:101,53:$Vz,55:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN}),o($Vx,$Vy,{57:102,53:$Vz,55:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN}),o($VO,[2,77],{63:103,23:[1,104]}),{10:$Vm,23:$Vn,43:105,53:$Vo,54:62,55:$Vp,56:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,64:$Vw},{65:[1,106]},{23:[1,107]},{16:109,24:$V6,28:$VP,30:108,33:$V7,34:$V8,35:$V9,36:$Va},{16:109,24:$V6,28:$VP,30:110,33:$V7,34:$V8,35:$V9,36:$Va},{16:109,19:$VP,24:$V6,30:111,33:$V7,34:$V8,35:$V9,36:$Va},{16:109,19:$VP,24:$V6,30:112,33:$V7,34:$V8,35:$V9,36:$Va},{19:[2,41]},{19:[2,42]},{10:[1,113]},o($Vx,[2,46]),o($Vx,[2,47]),o($Vx,[2,49]),{10:$Vm,23:$Vn,54:114,56:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,64:$Vw},{10:$Vm,23:$Vn,54:115,56:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,64:$Vw},{10:$Vm,23:$Vn,54:116,56:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,64:$Vw},{10:$Vm,23:$Vn,54:117,56:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,64:$Vw},o($Vx,$Vy,{57:118,53:$Vz,55:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN}),o($Vx,$Vy,{57:119,53:$Vz,55:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN}),{10:$Vm,23:$Vn,54:120,56:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,64:$Vw},{10:$Vm,23:$Vn,54:121,56:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,64:$Vw},{10:$Vm,23:$Vn,54:122,56:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,64:$Vw},{10:$Vm,23:$Vn,54:123,56:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,64:$Vw},{10:$Vm,23:$Vn,54:124,56:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,64:$Vw},{10:$Vm,23:$Vn,54:125,56:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,64:$Vw},{10:$Vm,23:$Vn,54:126,56:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,64:$Vw},{10:$Vm,23:$Vn,54:127,56:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,64:$Vw},{10:$Vm,23:$Vn,54:128,56:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,64:$Vw},o($Vx,[2,50]),o($Vx,[2,51]),o($Vx,[2,52]),o($Vx,[2,53]),o($Vx,[2,54]),o($Vx,$Vy,{57:129,53:$Vz,55:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN}),{10:$Vm,23:$Vn,28:$VQ,43:131,53:$Vo,54:62,55:$Vp,56:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,64:$Vw,80:130},{28:[1,132]},{10:$Vm,23:$Vn,54:133,56:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,64:$Vw},{24:[1,134]},{28:[1,135]},{10:[1,136]},{28:[1,137]},{19:[1,138]},{19:[1,139]},{19:$Vi,32:$Vj,50:140,51:$Vk},o($Vx,[2,60]),o($Vx,[2,61]),o($Vx,[2,62]),o($Vx,[2,63]),o($Vx,[2,64]),o($Vx,[2,65]),o($Vx,[2,66]),o($Vx,[2,67]),o($Vx,[2,68]),o($Vx,[2,69]),o($Vx,[2,70]),o($Vx,[2,71]),o($Vx,[2,72]),o($Vx,[2,73]),o($Vx,[2,74]),o($Vx,[2,55]),{28:[1,141]},{28:$VR,32:$VS,81:142},o($Vx,$Vy,{57:144,53:$Vz,55:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN}),o($Vx,[2,57]),{25:[1,145]},{11:[1,146]},o($VT,$VU,{31:147,32:$VV}),{11:[1,149]},o($VW,[2,102]),o($VW,[2,103]),{19:[2,44]},o($VO,[2,76]),{28:[2,78]},{10:$Vm,23:$Vn,43:150,53:$Vo,54:62,55:$Vp,56:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,64:$Vw},o($Vx,[2,56]),{26:[1,151]},{2:$VX,8:$VY,10:$VZ,16:154,24:$V6,29:152,33:$V7,34:$V8,35:$V9,36:$Va,38:$V_,40:$V$,41:$V01,42:$V11,44:$V21,45:161,46:162,47:163,48:164,82:$V31,86:$V41,87:$V51,88:$V61},o($VT,[2,16]),{16:170,24:$V6,33:$V7,34:$V8,35:$V9,36:$Va},{2:$VX,8:$VY,10:$VZ,16:154,24:$V6,29:171,33:$V7,34:$V8,35:$V9,36:$Va,38:$V_,40:$V$,41:$V01,42:$V11,44:$V21,45:161,46:162,47:163,48:164,82:$V31,86:$V41,87:$V51,88:$V61},{28:$VR,32:$VS,81:172},{27:[1,173]},o($V71,[2,14]),o($V81,[2,25]),{10:$Ve,17:174},{23:[1,176],37:175,51:[1,177],69:[1,178],70:[1,179]},{10:$Vm,19:[1,182],23:$Vn,39:180,43:181,53:$Vo,54:62,55:$Vp,56:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,64:$Vw},{19:[1,183]},{19:[1,184]},{23:[1,185]},{23:[1,186]},{2:$VX,8:$VY,10:$VZ,16:154,24:$V6,29:187,33:$V7,34:$V8,35:$V9,36:$Va,38:$V_,40:$V$,41:$V01,42:$V11,44:$V21,45:161,46:162,47:163,48:164,82:$V31,86:$V41,87:$V51,88:$V61},{2:$VX,8:$VY,10:$VZ,16:154,24:$V6,29:188,33:$V7,34:$V8,35:$V9,36:$Va,38:$V_,40:$V$,41:$V01,42:$V11,44:$V21,45:161,46:162,47:163,48:164,82:$V31,86:$V41,87:$V51,88:$V61},{2:$VX,8:$VY,10:$VZ,16:154,24:$V6,29:189,33:$V7,34:$V8,35:$V9,36:$Va,38:$V_,40:$V$,41:$V01,42:$V11,44:$V21,45:161,46:162,47:163,48:164,82:$V31,86:$V41,87:$V51,88:$V61},{2:$VX,8:$VY,10:$VZ,16:154,24:$V6,29:190,33:$V7,34:$V8,35:$V9,36:$Va,38:$V_,40:$V$,41:$V01,42:$V11,44:$V21,45:161,46:162,47:163,48:164,82:$V31,86:$V41,87:$V51,88:$V61},{8:[1,192],19:[1,193],49:191},{23:[1,194]},{23:[1,195]},{23:[1,196]},{11:[1,197]},{10:[1,198]},o($V71,[2,15]),{28:[2,80]},{28:[1,199]},{2:$VX,8:$VY,10:$VZ,16:154,24:$V6,29:200,33:$V7,34:$V8,35:$V9,36:$Va,38:$V_,40:$V$,41:$V01,42:$V11,44:$V21,45:161,46:162,47:163,48:164,82:$V31,86:$V41,87:$V51,88:$V61},{2:$VX,8:$VY,10:$VZ,16:154,24:$V6,29:201,33:$V7,34:$V8,35:$V9,36:$Va,38:$V_,40:$V$,41:$V01,42:$V11,44:$V21,45:161,46:162,47:163,48:164,82:$V31,86:$V41,87:$V51,88:$V61},{10:$Vm,23:$Vn,28:$VQ,43:131,53:$Vo,54:62,55:$Vp,56:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,64:$Vw,80:202},{10:$Vm,23:$Vn,43:203,53:$Vo,54:62,55:$Vp,56:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,64:$Vw},{19:[1,204]},{19:[1,205]},{2:$VX,8:$VY,10:$VZ,16:154,24:$V6,29:206,33:$V7,34:$V8,35:$V9,36:$Va,38:$V_,40:$V$,41:$V01,42:$V11,44:$V21,45:161,46:162,47:163,48:164,82:$V31,86:$V41,87:$V51,88:$V61},{19:[1,207]},o($V91,[2,87]),{2:$VX,8:$VY,10:$VZ,16:154,24:$V6,29:208,33:$V7,34:$V8,35:$V9,36:$Va,38:$V_,40:$V$,41:$V01,42:$V11,44:$V21,45:161,46:162,47:163,48:164,82:$V31,86:$V41,87:$V51,88:$V61},{2:$VX,8:$VY,10:$VZ,16:154,24:$V6,29:209,33:$V7,34:$V8,35:$V9,36:$Va,38:$V_,40:$V$,41:$V01,42:$V11,44:$V21,45:161,46:162,47:163,48:164,82:$V31,86:$V41,87:$V51,88:$V61},{10:$Vm,23:$Vn,43:210,53:$Vo,54:62,55:$Vp,56:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,64:$Vw},{10:$Vm,23:$Vn,43:211,53:$Vo,54:62,55:$Vp,56:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,64:$Vw},o($V81,[2,33]),o($V81,[2,34]),o($V81,[2,35]),o($V81,[2,36]),o($V81,[2,37]),o($V81,[2,38]),{2:$VX,8:$VY,10:$VZ,16:154,24:$V6,29:212,33:$V7,34:$V8,35:$V9,36:$Va,38:$V_,40:$V$,41:$V01,42:$V11,44:$V21,45:161,46:162,47:163,48:164,82:$V31,86:$V41,87:$V51,88:$V61},{10:$Vm,23:$Vn,43:213,53:$Vo,54:62,55:$Vp,56:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,64:$Vw},{16:214,24:$V6,33:$V7,34:$V8,35:$V9,36:$Va},{10:$Vm,23:$Vn,43:215,53:$Vo,54:62,55:$Vp,56:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,64:$Vw},{2:$VX,8:$VY,10:$VZ,16:154,24:$V6,29:216,33:$V7,34:$V8,35:$V9,36:$Va,38:$V_,40:$V$,41:$V01,42:$V11,44:$V21,45:161,46:162,47:163,48:164,82:$V31,86:$V41,87:$V51,88:$V61},o($VT,$VU,{31:217,32:$VV}),{11:[1,218]},o($V81,[2,26]),o($V81,[2,27]),{28:[1,219]},{19:[1,220]},o($V91,[2,84]),o($V91,[2,85]),o($V81,[2,28]),o($V91,[2,86]),o($V81,[2,29]),o($V81,[2,30]),{28:[1,221]},{28:[1,222]},o($V81,[2,39]),{28:[1,223]},{10:$Ve,17:224},{28:[1,225]},{87:[1,226]},o($VT,[2,18]),{2:$VX,8:$VY,10:$VZ,16:154,24:$V6,29:227,33:$V7,34:$V8,35:$V9,36:$Va,38:$V_,40:$V$,41:$V01,42:$V11,44:$V21,45:161,46:162,47:163,48:164,82:$V31,86:$V41,87:$V51,88:$V61},{19:[1,228]},o($V91,[2,83]),{19:[1,229]},{19:[1,230]},{11:[1,231]},{10:$Vm,23:$Vn,43:232,53:$Vo,54:62,55:$Vp,56:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,64:$Vw},{11:[1,233]},{23:[1,234]},o($V71,[2,13]),o($V91,[2,82]),{2:$VX,8:$VY,10:$VZ,16:154,24:$V6,29:235,33:$V7,34:$V8,35:$V9,36:$Va,38:$V_,40:$V$,41:$V01,42:$V11,44:$V21,45:161,46:162,47:163,48:164,82:$V31,86:$V41,87:$V51,88:$V61},{2:$VX,8:$VY,10:$VZ,16:154,24:$V6,29:236,33:$V7,34:$V8,35:$V9,36:$Va,38:$V_,40:$V$,41:$V01,42:$V11,44:$V21,45:161,46:162,47:163,48:164,82:$V31,86:$V41,87:$V51,88:$V61},{2:$VX,8:$VY,10:$VZ,16:154,24:$V6,29:237,33:$V7,34:$V8,35:$V9,36:$Va,38:$V_,40:$V$,41:$V01,42:$V11,44:$V21,45:161,46:162,47:163,48:164,82:$V31,86:$V41,87:$V51,88:$V61},{19:[1,238]},{2:$VX,8:$VY,10:$VZ,16:154,24:$V6,29:239,33:$V7,34:$V8,35:$V9,36:$Va,38:$V_,40:$V$,41:$V01,42:$V11,44:$V21,45:161,46:162,47:163,48:164,82:$V31,86:$V41,87:$V51,88:$V61},{10:$Vm,23:$Vn,43:240,53:$Vo,54:62,55:$Vp,56:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,64:$Vw},o($V81,[2,31]),o($V81,[2,32]),o($V91,[2,90],{83:241,84:[1,242]}),{10:$Vm,23:$Vn,43:243,53:$Vo,54:62,55:$Vp,56:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,64:$Vw},o($V91,[2,94]),{28:[1,244]},o($V91,[2,88]),{11:[1,247],45:246,82:$V31,85:245},{28:[1,248]},{19:[1,249]},o($V91,[2,89]),o($V91,[2,91]),{2:$VX,8:$VY,10:$VZ,16:154,24:$V6,29:250,33:$V7,34:$V8,35:$V9,36:$Va,38:$V_,40:$V$,41:$V01,42:$V11,44:$V21,45:161,46:162,47:163,48:164,82:$V31,86:$V41,87:$V51,88:$V61},{11:[1,251]},o($V91,[2,95]),o($V91,[2,92]),{2:$VX,8:$VY,10:$VZ,16:154,24:$V6,29:252,33:$V7,34:$V8,35:$V9,36:$Va,38:$V_,40:$V$,41:$V01,42:$V11,44:$V21,45:161,46:162,47:163,48:164,82:$V31,86:$V41,87:$V51,88:$V61},o($V91,[2,93])],
defaultActions: {2:[2,1],4:[2,3],10:[2,2],13:[2,4],21:[2,20],22:[2,21],23:[2,22],24:[2,23],25:[2,24],77:[2,41],78:[2,42],140:[2,44],142:[2,78],172:[2,80]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    //let CNodoError=require('../JavaAST/NodoError');
    const Nodo = require("./nodo");

    class Token {
    	constructor(Tipo, Lexema, Fila, Columna) {
			this.Tipo = Tipo;
			this.Lexema = Lexema;
			this.Fila = Fila
			this.Columna = Columna
		}
    }

	class Error {
    	constructor(Tipo, Lexema, Descripcion, Fila, Columna) {
			this.Tipo = Tipo;
			this.Lexema = Lexema;
			this.Descripcion = Descripcion
			this.Fila = Fila
			this.Columna = Columna
		}
    }

	var ListaErrores = [];
	var ListaTokens = [];

	var traductor= "";
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// Espacios
break;
case 1:// comentario unilinea
break;
case 2:// comentario multilinea
break;
case 3:ListaTokens.push(new Token('Reservada_public', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 5;
break;
case 4:ListaTokens.push(new Token('Reservada_class', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 9;
break;
case 5:ListaTokens.push(new Token('Reservada_interface', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 13;
break;
case 6:ListaTokens.push(new Token('Reservada_void', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 21;
break;
case 7:ListaTokens.push(new Token('Reservada_int', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 33;
break;
case 8:ListaTokens.push(new Token('Reservada_double', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 34;
break;
case 9:ListaTokens.push(new Token('Reservada_char', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 35;
break;
case 10:ListaTokens.push(new Token('Reservada_String', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 24;
break;
case 11:ListaTokens.push(new Token('Reservada_boolean', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 36;
break;
case 12:ListaTokens.push(new Token('Reservada_for', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 86;
break;
case 13:ListaTokens.push(new Token('Reservada_while', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 87;
break;
case 14:ListaTokens.push(new Token('Reservada_println', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 44;
break;
case 15:ListaTokens.push(new Token('Reservada_print', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 42;
break;
case 16:ListaTokens.push(new Token('Reservada_do', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 88;
break;
case 17:ListaTokens.push(new Token('Reservada_if', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 82;
break;
case 18:ListaTokens.push(new Token('Reservada_else', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 84;
break;
case 19:ListaTokens.push(new Token('Reservada_break', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 41;
break;
case 20:ListaTokens.push(new Token('Reservada_continue', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 40;
break;
case 21:ListaTokens.push(new Token('Reservada_return', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 38;
break;
case 22:ListaTokens.push(new Token('Reservada_static', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 20;
break;
case 23:ListaTokens.push(new Token('Reservada_main', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 22;
break;
case 24:ListaTokens.push(new Token('Reservada_args', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 27;
break;
case 25:ListaTokens.push(new Token('Reservada_true', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 61;
break;
case 26:ListaTokens.push(new Token('Reservada_false', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 62;
break;
case 27:ListaTokens.push(new Token('Simbolo_AND', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 77;
break;
case 28:ListaTokens.push(new Token('Simbolo_OR', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 78;
break;
case 29:ListaTokens.push(new Token('Simbolo_Adicion', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 69;
break;
case 30:ListaTokens.push(new Token('Simbolo_Mas', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 53;
break;
case 31:ListaTokens.push(new Token('Simbolo_Sustraccion', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 70;
break;
case 32:ListaTokens.push(new Token('Simbolo_Menos', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 55;
break;
case 33:ListaTokens.push(new Token('Simbolo_Asterisco', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 67;
break;
case 34:ListaTokens.push(new Token('Simbolo_Diagonal', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 68;
break;
case 35:ListaTokens.push(new Token('Simbolo_Comparacion', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 71;
break;
case 36:ListaTokens.push(new Token('Simbolo_Igual', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 51;
break;
case 37:ListaTokens.push(new Token('Simbolo_Mayor_Igual', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 73;
break;
case 38:ListaTokens.push(new Token('Simbolo_Mayor', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 72;
break;
case 39:ListaTokens.push(new Token('Simbolo_Menor_Igual', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 75;
break;
case 40:ListaTokens.push(new Token('Simbolo_Menor', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 74;
break;
case 41:ListaTokens.push(new Token('Simbolo_Distinto', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 76;
break;
case 42:ListaTokens.push(new Token('Simbolo_Negación', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'Simbolo_Negación';
break;
case 43:ListaTokens.push(new Token('Simbolo_Abrir_LLaves', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 11;
break;
case 44:ListaTokens.push(new Token('Simbolo_Cerrar_LLaves', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 8;
break;
case 45:ListaTokens.push(new Token('Simbolo_Abrir_Parentesis', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 23;
break;
case 46:ListaTokens.push(new Token('Simbolo_Cerrar_Parentesis', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 28;
break;
case 47:ListaTokens.push(new Token('Simbolo_Punto_Y_Coma', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 19;
break;
case 48:ListaTokens.push(new Token('Simbolo_Punto', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'Simbolo_Punto';
break;
case 49:ListaTokens.push(new Token('Simbolo_Coma', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 32;
break;
case 50:ListaTokens.push(new Token('Simbolo_Abrir_Corchete', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 25;
break;
case 51:ListaTokens.push(new Token('Simbolo_Cerrar_Corchete', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 26;
break;
case 52:ListaTokens.push(new Token('Simbolo_Xor', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 79;
break;
case 53:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); ListaTokens.push(new Token('Cadena', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 59; 
break;
case 54:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); ListaTokens.push(new Token('Caracter', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 60; 
break;
case 55:ListaTokens.push(new Token('Decimal', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 58;
break;
case 56:ListaTokens.push(new Token('Entero', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 56;
break;
case 57:ListaTokens.push(new Token('ID', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 10;
break;
case 58:return 7;
break;
case 59: ListaErrores.push(new Error('Lexico', yy_.yytext, "Simbolo no perteneciente al lenguaje", yy_.yylloc.first_line, yy_.yylloc.first_column));
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:public\b)/i,/^(?:class\b)/i,/^(?:interface\b)/i,/^(?:void\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:String\b)/i,/^(?:boolean\b)/i,/^(?:for\b)/i,/^(?:while\b)/i,/^(?:System\.out\.println\b)/i,/^(?:System\.out\.print\b)/i,/^(?:do\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:static\b)/i,/^(?:main\b)/i,/^(?:args\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:\+\+)/i,/^(?:\+)/i,/^(?:--)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:==)/i,/^(?:=)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:!=)/i,/^(?:!)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\()/i,/^(?:\))/i,/^(?:;)/i,/^(?:\.)/i,/^(?:,)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\^)/i,/^(?:"[^\"]*")/i,/^(?:'[^\"]')/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:[0-9]+\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}